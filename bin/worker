#!/usr/bin/env php
<?php

autoload();

use Recruiter\Cli;
use Recruiter\Option;
use Recruiter\Recruiter;
use Recruiter\Worker;

$cli = new Cli();
$cli->add('recruiter', new Option\TargetHost('target'));
$cli->add('wait-strategy', new Option\WaitStrategy('backoff-to', '30s'));
$cli->add('bootstrap', new Option\Bootstrap('bootstrap'));
$cli->parse();


$options = array_merge(
    [
        'work-on' => 'all',
    ],
    getopt('', ['work-on::', 'respawn'])
);

$options['respawn'] = array_key_exists('respawn', $options);

GracefulDeath::around(function($life) use ($cli, $options) {

    $cli->get('bootstrap')->load();
    $recruiter = $cli->get('recruiter');
    $waitStrategy = $cli->get('wait-strategy');

    $pid = posix_getpid();

    $worker = $recruiter->hire();
    if ($options['work-on'] !== 'all') {
        $worker->workOnJobsTaggedAs($options['work-on']);
    }

    printf('[WORKER][%d][%s] ready to work!' . PHP_EOL, $pid, date('c'));
    while (!$life->askedToStop()) {
        $doneSomeWork = $worker->work();
        ($doneSomeWork) ?
            $waitStrategy->goForward() :
            $waitStrategy->wait()->backOff();
    }
    printf('[WORKER][%d][%s] ok, see you space cowboy...' . PHP_EOL, $pid, date('c'));

})
->doNotCaptureOutput()
->catchSignals([SIGTERM, SIGQUIT, SIGINT])
->reanimationPolicy(function() use ($options) {
    if ($options['respawn']) {
        printf(
            '[SUPERVISOR][%d][%s] worker died, respawn...' . PHP_EOL,
            posix_getpid(), date('c')
        );
        return true;
    }
    printf(
        '[SUPERVISOR][%d][%s] %s' . PHP_EOL, posix_getpid(), date('c'),
        'worker died, I will let it go, start with --respawn options if you wish otherwise'
    );
    return false;
})
->run();


function autoload() {
    foreach (['/../vendor', '/../../..'] as $rp) {
        $file = __DIR__ . $rp . '/autoload.php';
        if (file_exists($file)) {
            require_once $file;
            break;
        }
    }
    if (!class_exists('Composer\Autoload\ClassLoader', false)) {
        fprintf(STDERR,
            'You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }
}
