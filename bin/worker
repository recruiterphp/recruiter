#!/usr/bin/env php
<?php

autoload();

use Recruiter\Cli;
use Recruiter\Option;
use Recruiter\Recruiter;
use Recruiter\WorkerSupervisor;
use Recruiter\Worker;

$cli = new Cli();
$cli->add('recruiter', new Option\TargetHost('target'));
$cli->add('wait-strategy', new Option\WaitStrategy('backoff-to', '30s'));
$cli->add('memory-limit', new Option\MemoryLimit('memory-limit', '64MB'));
$cli->add('supervisor', new Option\Supervisor('respawn'));
$cli->add('bootstrap', new Option\Bootstrap('bootstrap'));
$cli->add('work-on', new Option\WorkOn('work-on'));
$cli->parse();

$process = new WorkerSupervisor();

$cli->get('supervisor')->applyTo(

    GracefulDeath::around(function($life) use ($cli, $process) {
        $cli->get('bootstrap')->load();
        $recruiter = $cli->get('recruiter');
        $memoryLimit = $cli->get('memory-limit');
        $waitStrategy = $cli->get('wait-strategy');
        $filterJobToWorkOn = $cli->get('work-on');

        $worker = $filterJobToWorkOn->applyTo($recruiter->hire());
        $process->associatedTo($worker);

        printf('[WORKER][%d][%s] ready to work!' . PHP_EOL, posix_getpid(), date('c'));
        while (!$life->askedToStop()) {
            $doneSomeWork = $worker->work();
            $memoryLimit->ensure(memory_get_usage());
            ($doneSomeWork) ?
                $waitStrategy->goForward() :
                $waitStrategy->wait()->backOff();
        }
        printf('[WORKER][%d][%s] ok, see you space cowboy...' . PHP_EOL, posix_getpid(), date('c'));
    })
    ->doNotCaptureOutput()
    ->catchSignals([SIGTERM, SIGQUIT, SIGINT])
    ->afterDeath(function() use ($process, $cli) {
        $cli->get('recruiter')->cleanUpAfterWorkerProcessDied($process);
        printf(
            '[SUPERVISOR][%d][%s] %s' . PHP_EOL, posix_getpid(), date('c'),
            'cleaned up after the worker death'
        );
    })
)
->run();


function autoload() {
    foreach (['/../vendor', '/../../..'] as $rp) {
        $file = __DIR__ . $rp . '/autoload.php';
        if (file_exists($file)) {
            require_once $file;
            break;
        }
    }
    if (!class_exists('Composer\Autoload\ClassLoader', false)) {
        fprintf(STDERR,
            'You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }
}
