#!/usr/bin/env php
<?php

autoload();

use Recruiter\Cli;
use Recruiter\Option;
use Recruiter\Recruiter;
use Recruiter\Worker;

$cli = new Cli();
$cli->add('recruiter', new Option\TargetHost('target'));
$cli->add('wait-strategy', new Option\WaitStrategy('backoff-to', '30s'));
$cli->add('memory-limit', new Option\MemoryLimit('memory-limit', '64MB'));
$cli->add('bootstrap', new Option\Bootstrap('bootstrap'));
$cli->add('work-on', new Option\WorkOn('work-on'));
$cli->parse();

$cli->get('bootstrap')->load();
$recruiter = $cli->get('recruiter');
$memoryLimit = $cli->get('memory-limit');
$waitStrategy = $cli->get('wait-strategy');
$filterJobToWorkOn = $cli->get('work-on');

$askedToStop = false;
$worker = $filterJobToWorkOn->applyTo($recruiter->hire());

foreach ([SIGTERM, SIGQUIT, SIGINT] as $signal) {
    pcntl_signal($signal, function($signal) use(&$askedToStop) {
        $askedToStop = true;
    });
}

printf('[WORKER][%d][%s] worker %s ready to work!' . PHP_EOL, posix_getpid(), date('c'), $worker->id());
while (!askedToStop()) {
    $doneSomeWork = $worker->work();
    $memoryLimit->ensure(memory_get_usage());
    if ($doneSomeWork) {
        printf(
            '[WORKER][%d][%s] executed job' . PHP_EOL,
            posix_getpid(), date('c')
        );
    }
    ($doneSomeWork) ?
        $waitStrategy->reset() :
        $waitStrategy->wait()->backOff();
}
$worker->retire();
printf(
    '[WORKER][%d][%s] %s' . PHP_EOL, posix_getpid(), date('c'),
    'cleaned up after the worker death'
);
printf('[WORKER][%d][%s] ok, see you space cowboy...' . PHP_EOL, posix_getpid(), date('c'));

function askedToStop()
{
    global $askedToStop;
    pcntl_signal_dispatch();
    return $askedToStop;
}

function autoload()
{
    foreach (['/../vendor', '/../../..'] as $rp) {
        $file = __DIR__ . $rp . '/autoload.php';
        if (file_exists($file)) {
            require_once $file;
            break;
        }
    }
    if (!class_exists('Composer\Autoload\ClassLoader', false)) {
        fprintf(STDERR,
            'You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }
}
