#!/usr/bin/env php
<?php

autoload();

use Recruiter\Cli;
use Recruiter\Option;
use Recruiter\Recruiter;
use Recruiter\Worker;
use Onebip\Clock\SystemClock;

$cli = new Cli();
$cli->add('recruiter', new Option\TargetHost('target'));
$cli->add('wait-strategy', new Option\WaitStrategy('backoff-to', '30s'));
$cli->add('memory-limit', new Option\MemoryLimit('memory-limit', '256MB'));
$cli->parse();

$recruiter = $cli->get('recruiter');
$waitStrategy = $cli->get('wait-strategy');
$memoryLimit = $cli->get('memory-limit');

$recruiter->ensureIsTheOnlyOne(
    $waitStrategy->timeToWaitAtMost(),
    $otherwise = function() {
        printf(
            '[RECRUITER][%d][%s] unable to start more than one recruiter at a time, sorry space cowboy...' . PHP_EOL,
            posix_getpid(), date('c')
        );
        exit(0);
    }
);

foreach ([SIGTERM, SIGQUIT, SIGINT] as $signal) {
    pcntl_signal($signal, function($signal) use(&$askedToStop) {
        $askedToStop = true;
    });
}

printf(
    '[RECRUITER][%d][%s] ready to recruit!' . PHP_EOL,
    posix_getpid(), date('c')
);
$recruiter->init();
while (!askedToStop()) {
    $memoryUsage = ByteUnits\bytes(memory_get_usage());
    $pickStartAt = microtime(true);
    $numberOfAssignments = $recruiter->assignJobsToWorkers();
    $pickEndAt = microtime(true);
    printf(
        '[RECRUITER][%d][%s][%s] picked jobs for %d workers in %fms' . PHP_EOL,
        posix_getpid(), date('c'), $memoryUsage->format(),
        $numberOfAssignments, ($pickEndAt - $pickStartAt) * 1000
    );
    $memoryLimit->ensure($memoryUsage);
    $recruiter->stillHere($waitStrategy->timeToWaitAtMost());
    $recruiter->retireDeadWorkers(new SystemClock());
    ($numberOfAssignments === 0) ?
        $waitStrategy->wait()->backOff() :
        $waitStrategy->reset();
}
$recruiter->bye();
printf(
    '[RECRUITER][%d][%s] ok, see you space cowboy...' . PHP_EOL,
    posix_getpid(), date('c')
);

function askedToStop()
{
    global $askedToStop;
    pcntl_signal_dispatch();
    return $askedToStop;
}

function autoload() {
    foreach (['/../vendor', '/../../..'] as $rp) {
        $file = __DIR__ . $rp . '/autoload.php';
        if (file_exists($file)) {
            require_once $file;
            break;
        }
    }
    if (!class_exists('Composer\Autoload\ClassLoader', false)) {
        fprintf(STDERR,
            'You need to set up the project dependencies using the following commands:' . PHP_EOL .
            'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
            'php composer.phar install' . PHP_EOL
        );
        exit(1);
    }
}
