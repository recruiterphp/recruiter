#!/bin/zsh

PROJECT_ROOT=$0:A:h:h

source $PROJECT_ROOT/etc/configuration.sh

mkdir -p $LOG_DIRECTORY
mkdir -p $DATA_DIRECTORY

for SHARD in $SHARDS; do
  echo "START recruiter-$SHARD"
  for REPLICA in $REPLICAS; do
    echo "START recruiter-${SHARD}-${REPLICA}"
    mkdir -p "$DATA_DIRECTORY/recruiter-${SHARD}-${REPLICA}"
    eval "$MONGOD --shardsvr --replSet \"recruiter-$SHARD\" \
      --port $SERVICE_PORT_OF[${SHARD}-${REPLICA}] \
      --dbpath \"$DATA_DIRECTORY/recruiter-${SHARD}-${REPLICA}\" \
      --logpath \"$LOG_DIRECTORY/recruiter-${SHARD}-${REPLICA}.log\" \
      $MONGOD_FLAGS --fork --quiet >> \"$LOG_DIRECTORY/startup\""
  done

  $MONGO localhost:$SERVICE_PORT_OF[${SHARD}-R1]/admin --quiet --eval "
    print('CONFIGURE primary node of recruiter-$SHARD')
    rs.initiate({
      _id: 'recruiter-$SHARD',
      members: [
        {
          _id: 0,
          host: 'localhost:$SERVICE_PORT_OF[${SHARD}-R1]'
        }
      ]
    })

    print('WAITING for primary election...')
    while(rs.status().myState !== 1) sleep(1)

    print('CONFIGURE recruiter-$SHARD replica set')
    printjson([
      rs.add('localhost:$SERVICE_PORT_OF[${SHARD}-R2]'),
      rs.add('localhost:$SERVICE_PORT_OF[${SHARD}-R3]', {arbiterOnly: true})
    ])
  "
done


for CS in $CONFIGURATIONS; do
  echo "START recruiter-$CS"
  mkdir -p "$DATA_DIRECTORY/recruiter-${CS}"
  eval "$MONGOD --configsvr --port $SERVICE_PORT_OF[$CS] \
    --dbpath \"$DATA_DIRECTORY/recruiter-${CS}\" \
    --logpath \"$LOG_DIRECTORY/recruiter-${CS}.log\" \
    $MONGOD_FLAGS --fork --quiet >> \"$LOG_DIRECTORY/startup\""
done


for MS in $ROUTERS; do
  echo "START recruiter-$MS"
  $MONGOS --configdb localhost:$SERVICE_PORT_OF[C1],localhost:$SERVICE_PORT_OF[C2],localhost:$SERVICE_PORT_OF[C3] \
    --port $SERVICE_PORT_OF[$MS] --logpath "$LOG_DIRECTORY/mongos-${MS}.log" \
    --fork --quiet >> "$LOG_DIRECTORY/startup"
done


$MONGO localhost:$SERVICE_PORT_OF[M1] --eval "
print('CONFIGURE shards')
printjson([
  sh.addShard('recruiter-S1/localhost:$SERVICE_PORT_OF[S1-R1],localhost:$SERVICE_PORT_OF[S1-R2]'),
  sh.addShard('recruiter-S2/localhost:$SERVICE_PORT_OF[S2-R1],localhost:$SERVICE_PORT_OF[S2-R2]')
])

print('CHECK shards')
printjson(
  db.getSiblingDB('config').shards.find().toArray()
)

print('ENABLE sharding on recruiter DB')
sh.enableSharding('recruiter')
printjson(
  db.getSiblingDB('config').databases.find().toArray()
)

print('PREPARE recruiter DB')
sh.shardCollection('recruiter.roster', {_id: 1})
sh.shardCollection('recruiter.scheduled', {_id: 1})
sh.shardCollection('recruiter.archived', {_id: 1})

db.runCommand({collMod: 'scheduled', usePowerOf2Sizes : true})
db.runCommand({collMod: 'archived', usePowerOf2Sizes : true})

db.getSiblingDB('recruiter').getCollection('scheduled').ensureIndex({
  scheduled_at: 1,
  active: 1,
  locked: 1,
  tags: 1
})

print('DONE!')
"
